url: https://school.programmers.co.kr/learn/courses/30/lessons/42861

function solution(n, costs) {
    
    const getParent = (set, a) => {
        if(set[a] === a) return a;
        return getParent(set, set[a]);
    }
    
    const isSameParent = (set, a, b) => {
        if(getParent(set, a) === getParent(set ,b)) return true;
        else return false;
    }
    
    const unionParent = (set, a, b) => {
        a = getParent(set, a);
        b = getParent(set, b);
        
        if(a < b) set[b] = a;
        else set[a] = b;
    };
    
    // 비용(costs[i][2])을 기준으로 오름차순 정렬
    costs.sort((a, b) => a[2] - b[2]);
    
    let set = new Array(n);
    
    for(let i = 0; i < n; i++) {
        set[i] = i;
    }
    
    let cost = 0;
    
    for(let i = 0; i < costs.length; i++) {
        
        // 동일한 부모가 아닐때만 간선을 연결
        if(isSameParent(set, costs[i][0], costs[i][1]) === false) {
            cost = cost + costs[i][2];
            unionParent(set, costs[i][0], costs[i][1])
        }
    }
    
    return cost;
}
