url: https://school.programmers.co.kr/learn/courses/30/lessons/43164

function solution(tickets) {
    // solution을 담을 배열 answer 정의 
    let answer = [];
    
    // DFS 정의
    const DFS = (list, right, sAnswer) => {
        // 최초 경로를 찾으면, 탐색종료
        if(answer.length !== 0)
            return;
        
        for(let i = 0; i < list.length; i++) {
            let newLeft = list[i][0];
            
            if(right === newLeft) {
                let copyList = list.slice();
                let newRight = copyList[i][1];
                copyList.splice(i, 1);
                
                // 마지막 탐색인 경우
                // 배열 answer에 solution 저장후 탐색종료
                if(copyList.length === 0) {
                    answer = [...sAnswer, newLeft, newRight];
                    break;
                }
                else 
                    DFS(copyList, newRight, [...sAnswer, right]);
            }
        }
        
        return;
    }
    
    let len = tickets.length;
    
    // 원본 배열을 복사 및 알파벳 순으로 정렬
    let sortedTickets = tickets.sort();
    
    for(let i = 0; i < sortedTickets.length; i++) {
        // 배열 i번째 배열의 왼쪽 요소
        let left = sortedTickets[i][0]
        // 정렬된 배열 복사
        let list = sortedTickets.slice();
        
        // 배열 왼쪽 요소가 ICN일 경우
        if(left === "ICN") {
            // 배열 i번째 배열의 오른쪽 요소
            let right = list[i][1];
            // 복사된 배열에서 고려한 요소 제거
            list.splice(i, 1);
            // 남은 배열로 DFS 탐색
            DFS(list, right, [left]);
        }
    }
    
    return answer;
}
